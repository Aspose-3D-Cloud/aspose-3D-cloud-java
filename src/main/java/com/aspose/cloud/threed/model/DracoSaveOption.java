/*
 * Aspose.ThreeD Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.aspose.cloud.threed.model;

import java.util.Objects;
import com.aspose.cloud.threed.model.DracoCompressionLevel;
import com.aspose.cloud.threed.model.FileSystem;
import com.aspose.cloud.threed.model.SaveFormat;
import com.aspose.cloud.threed.model.SaveOptions;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.List;

/**
 * DracoSaveOption
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-08-14T15:01:31.292+08:00")
public class DracoSaveOption extends SaveOptions {
  @SerializedName("PositionBits")
  private Integer positionBits = null;

  @SerializedName("TextureCoordinateBits")
  private Integer textureCoordinateBits = null;

  @SerializedName("ColorBits")
  private Integer colorBits = null;

  @SerializedName("NormalBits")
  private Integer normalBits = null;

  @SerializedName("CompressionLevel")
  private DracoCompressionLevel compressionLevel = null;

  public DracoSaveOption positionBits(Integer positionBits) {
    this.positionBits = positionBits;
    return this;
  }

   /**
   * Quantization bits for position, default value is 14
   * @return positionBits
  **/
  @ApiModelProperty(value = "Quantization bits for position, default value is 14")
  public Integer getPositionBits() {
    return positionBits;
  }

  public void setPositionBits(Integer positionBits) {
    this.positionBits = positionBits;
  }

  public DracoSaveOption textureCoordinateBits(Integer textureCoordinateBits) {
    this.textureCoordinateBits = textureCoordinateBits;
    return this;
  }

   /**
   * Quantization bits for texture coordinate, default value is 12
   * @return textureCoordinateBits
  **/
  @ApiModelProperty(value = "Quantization bits for texture coordinate, default value is 12")
  public Integer getTextureCoordinateBits() {
    return textureCoordinateBits;
  }

  public void setTextureCoordinateBits(Integer textureCoordinateBits) {
    this.textureCoordinateBits = textureCoordinateBits;
  }

  public DracoSaveOption colorBits(Integer colorBits) {
    this.colorBits = colorBits;
    return this;
  }

   /**
   * Quantization bits for vertex color, default value is 10
   * @return colorBits
  **/
  @ApiModelProperty(value = "Quantization bits for vertex color, default value is 10")
  public Integer getColorBits() {
    return colorBits;
  }

  public void setColorBits(Integer colorBits) {
    this.colorBits = colorBits;
  }

  public DracoSaveOption normalBits(Integer normalBits) {
    this.normalBits = normalBits;
    return this;
  }

   /**
   * Quantization bits for normal vectors, default value is 10
   * @return normalBits
  **/
  @ApiModelProperty(value = "Quantization bits for normal vectors, default value is 10")
  public Integer getNormalBits() {
    return normalBits;
  }

  public void setNormalBits(Integer normalBits) {
    this.normalBits = normalBits;
  }

  public DracoSaveOption compressionLevel(DracoCompressionLevel compressionLevel) {
    this.compressionLevel = compressionLevel;
    return this;
  }

   /**
   * Compression level, default value is Aspose.ThreeD.Formats.DracoCompressionLevel.Standard.
   * @return compressionLevel
  **/
  @ApiModelProperty(value = "Compression level, default value is Aspose.ThreeD.Formats.DracoCompressionLevel.Standard.")
  public DracoCompressionLevel getCompressionLevel() {
    return compressionLevel;
  }

  public void setCompressionLevel(DracoCompressionLevel compressionLevel) {
    this.compressionLevel = compressionLevel;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DracoSaveOption dracoSaveOption = (DracoSaveOption) o;
    return Objects.equals(this.positionBits, dracoSaveOption.positionBits) &&
        Objects.equals(this.textureCoordinateBits, dracoSaveOption.textureCoordinateBits) &&
        Objects.equals(this.colorBits, dracoSaveOption.colorBits) &&
        Objects.equals(this.normalBits, dracoSaveOption.normalBits) &&
        Objects.equals(this.compressionLevel, dracoSaveOption.compressionLevel) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(positionBits, textureCoordinateBits, colorBits, normalBits, compressionLevel, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DracoSaveOption {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    positionBits: ").append(toIndentedString(positionBits)).append("\n");
    sb.append("    textureCoordinateBits: ").append(toIndentedString(textureCoordinateBits)).append("\n");
    sb.append("    colorBits: ").append(toIndentedString(colorBits)).append("\n");
    sb.append("    normalBits: ").append(toIndentedString(normalBits)).append("\n");
    sb.append("    compressionLevel: ").append(toIndentedString(compressionLevel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

