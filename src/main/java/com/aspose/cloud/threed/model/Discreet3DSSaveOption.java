/*
 * Aspose.ThreeD Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.aspose.cloud.threed.model;

import java.util.Objects;
import com.aspose.cloud.threed.model.FileSystem;
import com.aspose.cloud.threed.model.SaveFormat;
import com.aspose.cloud.threed.model.SaveOptions;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.List;

/**
 * Discreet3DSSaveOption
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-08-14T15:01:31.292+08:00")
public class Discreet3DSSaveOption extends SaveOptions {
  @SerializedName("ExportLight")
  private Boolean exportLight = null;

  @SerializedName("ExportCamera")
  private Boolean exportCamera = null;

  @SerializedName("DuplicatedNameSeparator")
  private String duplicatedNameSeparator = null;

  @SerializedName("DuplicatedNameCounterBase")
  private Integer duplicatedNameCounterBase = null;

  @SerializedName("DuplicatedNameCounterFormat")
  private String duplicatedNameCounterFormat = null;

  @SerializedName("MasterScale")
  private Double masterScale = null;

  @SerializedName("GammaCorrectedColor")
  private Boolean gammaCorrectedColor = null;

  @SerializedName("FlipCoordinateSystem")
  private Boolean flipCoordinateSystem = null;

  @SerializedName("HighPreciseColor")
  private Boolean highPreciseColor = null;

  public Discreet3DSSaveOption exportLight(Boolean exportLight) {
    this.exportLight = exportLight;
    return this;
  }

   /**
   * Gets or sets whether export all lights in the scene.
   * @return exportLight
  **/
  @ApiModelProperty(value = "Gets or sets whether export all lights in the scene.")
  public Boolean isExportLight() {
    return exportLight;
  }

  public void setExportLight(Boolean exportLight) {
    this.exportLight = exportLight;
  }

  public Discreet3DSSaveOption exportCamera(Boolean exportCamera) {
    this.exportCamera = exportCamera;
    return this;
  }

   /**
   * Gets or sets whether export all cameras in the scene
   * @return exportCamera
  **/
  @ApiModelProperty(value = "Gets or sets whether export all cameras in the scene")
  public Boolean isExportCamera() {
    return exportCamera;
  }

  public void setExportCamera(Boolean exportCamera) {
    this.exportCamera = exportCamera;
  }

  public Discreet3DSSaveOption duplicatedNameSeparator(String duplicatedNameSeparator) {
    this.duplicatedNameSeparator = duplicatedNameSeparator;
    return this;
  }

   /**
   * The separator between object&#39;s name and the duplicated counter, default value is \&quot;_\&quot;. When scene contains objects that use the same name, Aspose.3D 3DS exporter will generate a different name for the object. For example there&#39;s two nodes named \&quot;Box\&quot;, the first node will have a name \&quot;Box\&quot;, and the second node will get a new name \&quot;Box_2\&quot; using the default configuration
   * @return duplicatedNameSeparator
  **/
  @ApiModelProperty(value = "The separator between object's name and the duplicated counter, default value is \"_\". When scene contains objects that use the same name, Aspose.3D 3DS exporter will generate a different name for the object. For example there's two nodes named \"Box\", the first node will have a name \"Box\", and the second node will get a new name \"Box_2\" using the default configuration")
  public String getDuplicatedNameSeparator() {
    return duplicatedNameSeparator;
  }

  public void setDuplicatedNameSeparator(String duplicatedNameSeparator) {
    this.duplicatedNameSeparator = duplicatedNameSeparator;
  }

  public Discreet3DSSaveOption duplicatedNameCounterBase(Integer duplicatedNameCounterBase) {
    this.duplicatedNameCounterBase = duplicatedNameCounterBase;
    return this;
  }

   /**
   * The counter used by generating new name for duplicated names
   * @return duplicatedNameCounterBase
  **/
  @ApiModelProperty(value = "The counter used by generating new name for duplicated names")
  public Integer getDuplicatedNameCounterBase() {
    return duplicatedNameCounterBase;
  }

  public void setDuplicatedNameCounterBase(Integer duplicatedNameCounterBase) {
    this.duplicatedNameCounterBase = duplicatedNameCounterBase;
  }

  public Discreet3DSSaveOption duplicatedNameCounterFormat(String duplicatedNameCounterFormat) {
    this.duplicatedNameCounterFormat = duplicatedNameCounterFormat;
    return this;
  }

   /**
   * The format of the duplicated counter, default value is empty string.
   * @return duplicatedNameCounterFormat
  **/
  @ApiModelProperty(value = "The format of the duplicated counter, default value is empty string.")
  public String getDuplicatedNameCounterFormat() {
    return duplicatedNameCounterFormat;
  }

  public void setDuplicatedNameCounterFormat(String duplicatedNameCounterFormat) {
    this.duplicatedNameCounterFormat = duplicatedNameCounterFormat;
  }

  public Discreet3DSSaveOption masterScale(Double masterScale) {
    this.masterScale = masterScale;
    return this;
  }

   /**
   * Gets or sets the master scale used in exporting.
   * @return masterScale
  **/
  @ApiModelProperty(value = "Gets or sets the master scale used in exporting.")
  public Double getMasterScale() {
    return masterScale;
  }

  public void setMasterScale(Double masterScale) {
    this.masterScale = masterScale;
  }

  public Discreet3DSSaveOption gammaCorrectedColor(Boolean gammaCorrectedColor) {
    this.gammaCorrectedColor = gammaCorrectedColor;
    return this;
  }

   /**
   * Gets or sets the GammaCorrectedColor.
   * @return gammaCorrectedColor
  **/
  @ApiModelProperty(value = "Gets or sets the GammaCorrectedColor.")
  public Boolean isGammaCorrectedColor() {
    return gammaCorrectedColor;
  }

  public void setGammaCorrectedColor(Boolean gammaCorrectedColor) {
    this.gammaCorrectedColor = gammaCorrectedColor;
  }

  public Discreet3DSSaveOption flipCoordinateSystem(Boolean flipCoordinateSystem) {
    this.flipCoordinateSystem = flipCoordinateSystem;
    return this;
  }

   /**
   * Gets or sets flip coordinate system of control points/normal during importing/exporting..
   * @return flipCoordinateSystem
  **/
  @ApiModelProperty(value = "Gets or sets flip coordinate system of control points/normal during importing/exporting..")
  public Boolean isFlipCoordinateSystem() {
    return flipCoordinateSystem;
  }

  public void setFlipCoordinateSystem(Boolean flipCoordinateSystem) {
    this.flipCoordinateSystem = flipCoordinateSystem;
  }

  public Discreet3DSSaveOption highPreciseColor(Boolean highPreciseColor) {
    this.highPreciseColor = highPreciseColor;
    return this;
  }

   /**
   * Gets or sets the HighPreciseColor.
   * @return highPreciseColor
  **/
  @ApiModelProperty(value = "Gets or sets the HighPreciseColor.")
  public Boolean isHighPreciseColor() {
    return highPreciseColor;
  }

  public void setHighPreciseColor(Boolean highPreciseColor) {
    this.highPreciseColor = highPreciseColor;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Discreet3DSSaveOption discreet3DSSaveOption = (Discreet3DSSaveOption) o;
    return Objects.equals(this.exportLight, discreet3DSSaveOption.exportLight) &&
        Objects.equals(this.exportCamera, discreet3DSSaveOption.exportCamera) &&
        Objects.equals(this.duplicatedNameSeparator, discreet3DSSaveOption.duplicatedNameSeparator) &&
        Objects.equals(this.duplicatedNameCounterBase, discreet3DSSaveOption.duplicatedNameCounterBase) &&
        Objects.equals(this.duplicatedNameCounterFormat, discreet3DSSaveOption.duplicatedNameCounterFormat) &&
        Objects.equals(this.masterScale, discreet3DSSaveOption.masterScale) &&
        Objects.equals(this.gammaCorrectedColor, discreet3DSSaveOption.gammaCorrectedColor) &&
        Objects.equals(this.flipCoordinateSystem, discreet3DSSaveOption.flipCoordinateSystem) &&
        Objects.equals(this.highPreciseColor, discreet3DSSaveOption.highPreciseColor) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exportLight, exportCamera, duplicatedNameSeparator, duplicatedNameCounterBase, duplicatedNameCounterFormat, masterScale, gammaCorrectedColor, flipCoordinateSystem, highPreciseColor, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Discreet3DSSaveOption {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    exportLight: ").append(toIndentedString(exportLight)).append("\n");
    sb.append("    exportCamera: ").append(toIndentedString(exportCamera)).append("\n");
    sb.append("    duplicatedNameSeparator: ").append(toIndentedString(duplicatedNameSeparator)).append("\n");
    sb.append("    duplicatedNameCounterBase: ").append(toIndentedString(duplicatedNameCounterBase)).append("\n");
    sb.append("    duplicatedNameCounterFormat: ").append(toIndentedString(duplicatedNameCounterFormat)).append("\n");
    sb.append("    masterScale: ").append(toIndentedString(masterScale)).append("\n");
    sb.append("    gammaCorrectedColor: ").append(toIndentedString(gammaCorrectedColor)).append("\n");
    sb.append("    flipCoordinateSystem: ").append(toIndentedString(flipCoordinateSystem)).append("\n");
    sb.append("    highPreciseColor: ").append(toIndentedString(highPreciseColor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

