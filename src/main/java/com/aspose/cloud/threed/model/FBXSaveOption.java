/*
 * Aspose.ThreeD Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.aspose.cloud.threed.model;

import java.util.Objects;
import com.aspose.cloud.threed.model.SaveFormat;
import com.aspose.cloud.threed.model.SaveOptions;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.List;

/**
 * FBXSaveOption
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-09T10:19:53.827+08:00")
public class FBXSaveOption extends SaveOptions {
  @SerializedName("EnableCompression")
  private Boolean enableCompression = null;

  @SerializedName("FoldRepeatedCurveData")
  private Boolean foldRepeatedCurveData = null;

  @SerializedName("ExportLegacyMaterialProperties")
  private Boolean exportLegacyMaterialProperties = null;

  @SerializedName("VideoForTexture")
  private Boolean videoForTexture = null;

  @SerializedName("GenerateVertexElementMaterial")
  private Boolean generateVertexElementMaterial = null;

  public FBXSaveOption enableCompression(Boolean enableCompression) {
    this.enableCompression = enableCompression;
    return this;
  }

   /**
   *  Compression large binary data in the FBX file, default value is true
   * @return enableCompression
  **/
  @ApiModelProperty(value = " Compression large binary data in the FBX file, default value is true")
  public Boolean EnableCompression() {
    return enableCompression;
  }

  public void setEnableCompression(Boolean enableCompression) {
    this.enableCompression = enableCompression;
  }

  public FBXSaveOption foldRepeatedCurveData(Boolean foldRepeatedCurveData) {
    this.foldRepeatedCurveData = foldRepeatedCurveData;
    return this;
  }

   /**
   * Gets or sets whether reuse repeated curve data by increasing last data&#39;s ref count
   * @return foldRepeatedCurveData
  **/
  @ApiModelProperty(value = "Gets or sets whether reuse repeated curve data by increasing last data's ref count")
  public Boolean FoldRepeatedCurveData() {
    return foldRepeatedCurveData;
  }

  public void setFoldRepeatedCurveData(Boolean foldRepeatedCurveData) {
    this.foldRepeatedCurveData = foldRepeatedCurveData;
  }

  public FBXSaveOption exportLegacyMaterialProperties(Boolean exportLegacyMaterialProperties) {
    this.exportLegacyMaterialProperties = exportLegacyMaterialProperties;
    return this;
  }

   /**
   * Gets or sets whether export legacy material properties, used for back compatibility. This option is turned on by default
   * @return exportLegacyMaterialProperties
  **/
  @ApiModelProperty(value = "Gets or sets whether export legacy material properties, used for back compatibility. This option is turned on by default")
  public Boolean ExportLegacyMaterialProperties() {
    return exportLegacyMaterialProperties;
  }

  public void setExportLegacyMaterialProperties(Boolean exportLegacyMaterialProperties) {
    this.exportLegacyMaterialProperties = exportLegacyMaterialProperties;
  }

  public FBXSaveOption videoForTexture(Boolean videoForTexture) {
    this.videoForTexture = videoForTexture;
    return this;
  }

   /**
   * Gets or sets whether generate a Video instance for Aspose.ThreeD.Shading.Texture when exporting as FBX.
   * @return videoForTexture
  **/
  @ApiModelProperty(value = "Gets or sets whether generate a Video instance for Aspose.ThreeD.Shading.Texture when exporting as FBX.")
  public Boolean VideoForTexture() {
    return videoForTexture;
  }

  public void setVideoForTexture(Boolean videoForTexture) {
    this.videoForTexture = videoForTexture;
  }

  public FBXSaveOption generateVertexElementMaterial(Boolean generateVertexElementMaterial) {
    this.generateVertexElementMaterial = generateVertexElementMaterial;
    return this;
  }

   /**
   * Gets or sets whether always generate a Aspose.ThreeD.Entities.VertexElementMaterial for geometries if the attached node contains materials. This is turned off by default.
   * @return generateVertexElementMaterial
  **/
  @ApiModelProperty(value = "Gets or sets whether always generate a Aspose.ThreeD.Entities.VertexElementMaterial for geometries if the attached node contains materials. This is turned off by default.")
  public Boolean GenerateVertexElementMaterial() {
    return generateVertexElementMaterial;
  }

  public void setGenerateVertexElementMaterial(Boolean generateVertexElementMaterial) {
    this.generateVertexElementMaterial = generateVertexElementMaterial;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FBXSaveOption fbXSaveOption = (FBXSaveOption) o;
    return Objects.equals(this.enableCompression, fbXSaveOption.enableCompression) &&
        Objects.equals(this.foldRepeatedCurveData, fbXSaveOption.foldRepeatedCurveData) &&
        Objects.equals(this.exportLegacyMaterialProperties, fbXSaveOption.exportLegacyMaterialProperties) &&
        Objects.equals(this.videoForTexture, fbXSaveOption.videoForTexture) &&
        Objects.equals(this.generateVertexElementMaterial, fbXSaveOption.generateVertexElementMaterial) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enableCompression, foldRepeatedCurveData, exportLegacyMaterialProperties, videoForTexture, generateVertexElementMaterial, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FBXSaveOption {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    enableCompression: ").append(toIndentedString(enableCompression)).append("\n");
    sb.append("    foldRepeatedCurveData: ").append(toIndentedString(foldRepeatedCurveData)).append("\n");
    sb.append("    exportLegacyMaterialProperties: ").append(toIndentedString(exportLegacyMaterialProperties)).append("\n");
    sb.append("    videoForTexture: ").append(toIndentedString(videoForTexture)).append("\n");
    sb.append("    generateVertexElementMaterial: ").append(toIndentedString(generateVertexElementMaterial)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

