/*
 * Aspose.ThreeD Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.aspose.cloud.threed.model;

import java.util.Objects;
import com.aspose.cloud.threed.model.SaveFormat;
import com.aspose.cloud.threed.model.SaveOptions;
import com.aspose.cloud.threed.model.Vector3;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.List;

/**
 * HTMLSaveOption
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-09T10:19:53.827+08:00")
public class HTMLSaveOption extends SaveOptions {
  @SerializedName("ShowGrid")
  private Boolean showGrid = null;

  @SerializedName("ShowRulers")
  private Boolean showRulers = null;

  @SerializedName("ShowUI")
  private Boolean showUI = null;

  @SerializedName("OrientationBox")
  private Boolean orientationBox = null;

  @SerializedName("UpVector")
  private String upVector = null;

  @SerializedName("FarPlane")
  private Double farPlane = null;

  @SerializedName("NearPlane")
  private Double nearPlane = null;

  @SerializedName("LookAt")
  private Vector3 lookAt = null;

  @SerializedName("CameraPosition")
  private Vector3 cameraPosition = null;

  @SerializedName("FieldOfView")
  private Double fieldOfView = null;

  public HTMLSaveOption showGrid(Boolean showGrid) {
    this.showGrid = showGrid;
    return this;
  }

   /**
   *  Display a grid in the scene. Default value is true.
   * @return showGrid
  **/
  @ApiModelProperty(value = " Display a grid in the scene. Default value is true.")
  public Boolean ShowGrid() {
    return showGrid;
  }

  public void setShowGrid(Boolean showGrid) {
    this.showGrid = showGrid;
  }

  public HTMLSaveOption showRulers(Boolean showRulers) {
    this.showRulers = showRulers;
    return this;
  }

   /**
   *  Display rulers of x/y/z axises in the scene to measure the model. Default value is false
   * @return showRulers
  **/
  @ApiModelProperty(value = " Display rulers of x/y/z axises in the scene to measure the model. Default value is false")
  public Boolean ShowRulers() {
    return showRulers;
  }

  public void setShowRulers(Boolean showRulers) {
    this.showRulers = showRulers;
  }

  public HTMLSaveOption showUI(Boolean showUI) {
    this.showUI = showUI;
    return this;
  }

   /**
   * Display a simple UI in the scene. Default value is true
   * @return showUI
  **/
  @ApiModelProperty(value = "Display a simple UI in the scene. Default value is true")
  public Boolean ShowUI() {
    return showUI;
  }

  public void setShowUI(Boolean showUI) {
    this.showUI = showUI;
  }

  public HTMLSaveOption orientationBox(Boolean orientationBox) {
    this.orientationBox = orientationBox;
    return this;
  }

   /**
   * Display a orientation box. Default value is true.
   * @return orientationBox
  **/
  @ApiModelProperty(value = "Display a orientation box. Default value is true.")
  public Boolean OrientationBox() {
    return orientationBox;
  }

  public void setOrientationBox(Boolean orientationBox) {
    this.orientationBox = orientationBox;
  }

  public HTMLSaveOption upVector(String upVector) {
    this.upVector = upVector;
    return this;
  }

   /**
   * Gets or sets the up vector, value can be \&quot;x\&quot;/\&quot;y\&quot;/\&quot;z\&quot;, default value is \&quot;y\&quot;.
   * @return upVector
  **/
  @ApiModelProperty(value = "Gets or sets the up vector, value can be \"x\"/\"y\"/\"z\", default value is \"y\".")
  public String getUpVector() {
    return upVector;
  }

  public void setUpVector(String upVector) {
    this.upVector = upVector;
  }

  public HTMLSaveOption farPlane(Double farPlane) {
    this.farPlane = farPlane;
    return this;
  }

   /**
   * Gets or sets the far plane of the camera, default value is 1000
   * @return farPlane
  **/
  @ApiModelProperty(value = "Gets or sets the far plane of the camera, default value is 1000")
  public Double getFarPlane() {
    return farPlane;
  }

  public void setFarPlane(Double farPlane) {
    this.farPlane = farPlane;
  }

  public HTMLSaveOption nearPlane(Double nearPlane) {
    this.nearPlane = nearPlane;
    return this;
  }

   /**
   * Gets or sets the near plane of the camera, default value is 1
   * @return nearPlane
  **/
  @ApiModelProperty(value = "Gets or sets the near plane of the camera, default value is 1")
  public Double getNearPlane() {
    return nearPlane;
  }

  public void setNearPlane(Double nearPlane) {
    this.nearPlane = nearPlane;
  }

  public HTMLSaveOption lookAt(Vector3 lookAt) {
    this.lookAt = lookAt;
    return this;
  }

   /**
   * Gets or sets the default look at position, default value is (0, 0, 0)
   * @return lookAt
  **/
  @ApiModelProperty(value = "Gets or sets the default look at position, default value is (0, 0, 0)")
  public Vector3 getLookAt() {
    return lookAt;
  }

  public void setLookAt(Vector3 lookAt) {
    this.lookAt = lookAt;
  }

  public HTMLSaveOption cameraPosition(Vector3 cameraPosition) {
    this.cameraPosition = cameraPosition;
    return this;
  }

   /**
   * Gets or sets the initial position of the camera, default value is (10, 10, 10)
   * @return cameraPosition
  **/
  @ApiModelProperty(value = "Gets or sets the initial position of the camera, default value is (10, 10, 10)")
  public Vector3 getCameraPosition() {
    return cameraPosition;
  }

  public void setCameraPosition(Vector3 cameraPosition) {
    this.cameraPosition = cameraPosition;
  }

  public HTMLSaveOption fieldOfView(Double fieldOfView) {
    this.fieldOfView = fieldOfView;
    return this;
  }

   /**
   *  Gets or sets the field of the view, default value is 45, measured in degree
   * @return fieldOfView
  **/
  @ApiModelProperty(value = " Gets or sets the field of the view, default value is 45, measured in degree")
  public Double getFieldOfView() {
    return fieldOfView;
  }

  public void setFieldOfView(Double fieldOfView) {
    this.fieldOfView = fieldOfView;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HTMLSaveOption htMLSaveOption = (HTMLSaveOption) o;
    return Objects.equals(this.showGrid, htMLSaveOption.showGrid) &&
        Objects.equals(this.showRulers, htMLSaveOption.showRulers) &&
        Objects.equals(this.showUI, htMLSaveOption.showUI) &&
        Objects.equals(this.orientationBox, htMLSaveOption.orientationBox) &&
        Objects.equals(this.upVector, htMLSaveOption.upVector) &&
        Objects.equals(this.farPlane, htMLSaveOption.farPlane) &&
        Objects.equals(this.nearPlane, htMLSaveOption.nearPlane) &&
        Objects.equals(this.lookAt, htMLSaveOption.lookAt) &&
        Objects.equals(this.cameraPosition, htMLSaveOption.cameraPosition) &&
        Objects.equals(this.fieldOfView, htMLSaveOption.fieldOfView) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(showGrid, showRulers, showUI, orientationBox, upVector, farPlane, nearPlane, lookAt, cameraPosition, fieldOfView, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HTMLSaveOption {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    showGrid: ").append(toIndentedString(showGrid)).append("\n");
    sb.append("    showRulers: ").append(toIndentedString(showRulers)).append("\n");
    sb.append("    showUI: ").append(toIndentedString(showUI)).append("\n");
    sb.append("    orientationBox: ").append(toIndentedString(orientationBox)).append("\n");
    sb.append("    upVector: ").append(toIndentedString(upVector)).append("\n");
    sb.append("    farPlane: ").append(toIndentedString(farPlane)).append("\n");
    sb.append("    nearPlane: ").append(toIndentedString(nearPlane)).append("\n");
    sb.append("    lookAt: ").append(toIndentedString(lookAt)).append("\n");
    sb.append("    cameraPosition: ").append(toIndentedString(cameraPosition)).append("\n");
    sb.append("    fieldOfView: ").append(toIndentedString(fieldOfView)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

