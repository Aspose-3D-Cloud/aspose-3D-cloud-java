/*
 * Aspose.ThreeD Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.aspose.cloud.threed.model;

import java.util.Objects;
import com.aspose.cloud.threed.model.FileContentType;
import com.aspose.cloud.threed.model.FileSystem;
import com.aspose.cloud.threed.model.SaveFormat;
import com.aspose.cloud.threed.model.SaveOptions;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.List;

/**
 * GLTFSaveOption
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-08-14T15:01:31.292+08:00")
public class GLTFSaveOption extends SaveOptions {
  @SerializedName("PrettyPrint")
  private Boolean prettyPrint = null;

  @SerializedName("EmbedAssets")
  private Boolean embedAssets = null;

  @SerializedName("UseCommonMaterials")
  private Boolean useCommonMaterials = null;

  @SerializedName("FlipTexCoordV")
  private Boolean flipTexCoordV = null;

  @SerializedName("BufferFile")
  private Boolean bufferFile = null;

  @SerializedName("SaveExtras")
  private Boolean saveExtras = null;

  @SerializedName("DracoCompression")
  private Boolean dracoCompression = null;

  @SerializedName("FileContentType")
  private FileContentType fileContentType = null;

  public GLTFSaveOption prettyPrint(Boolean prettyPrint) {
    this.prettyPrint = prettyPrint;
    return this;
  }

   /**
   * The JSON content of GLTF file is indented for human reading, default value is false.
   * @return prettyPrint
  **/
  @ApiModelProperty(value = "The JSON content of GLTF file is indented for human reading, default value is false.")
  public Boolean isPrettyPrint() {
    return prettyPrint;
  }

  public void setPrettyPrint(Boolean prettyPrint) {
    this.prettyPrint = prettyPrint;
  }

  public GLTFSaveOption embedAssets(Boolean embedAssets) {
    this.embedAssets = embedAssets;
    return this;
  }

   /**
   * Embed all external assets as base64 into single file in ASCII mode, default value is false.
   * @return embedAssets
  **/
  @ApiModelProperty(value = "Embed all external assets as base64 into single file in ASCII mode, default value is false.")
  public Boolean isEmbedAssets() {
    return embedAssets;
  }

  public void setEmbedAssets(Boolean embedAssets) {
    this.embedAssets = embedAssets;
  }

  public GLTFSaveOption useCommonMaterials(Boolean useCommonMaterials) {
    this.useCommonMaterials = useCommonMaterials;
    return this;
  }

   /**
   * Serialize materials using KHR common material extensions, default value is false. Set this to false will cause Aspose.3D export a set of vertex/fragment shader if Aspose.ThreeD.Formats.GLTFSaveOptions.ExportShaders
   * @return useCommonMaterials
  **/
  @ApiModelProperty(value = "Serialize materials using KHR common material extensions, default value is false. Set this to false will cause Aspose.3D export a set of vertex/fragment shader if Aspose.ThreeD.Formats.GLTFSaveOptions.ExportShaders")
  public Boolean isUseCommonMaterials() {
    return useCommonMaterials;
  }

  public void setUseCommonMaterials(Boolean useCommonMaterials) {
    this.useCommonMaterials = useCommonMaterials;
  }

  public GLTFSaveOption flipTexCoordV(Boolean flipTexCoordV) {
    this.flipTexCoordV = flipTexCoordV;
    return this;
  }

   /**
   * Flip texture coordinate v(t) component, default value is true.
   * @return flipTexCoordV
  **/
  @ApiModelProperty(value = "Flip texture coordinate v(t) component, default value is true.")
  public Boolean isFlipTexCoordV() {
    return flipTexCoordV;
  }

  public void setFlipTexCoordV(Boolean flipTexCoordV) {
    this.flipTexCoordV = flipTexCoordV;
  }

  public GLTFSaveOption bufferFile(Boolean bufferFile) {
    this.bufferFile = bufferFile;
    return this;
  }

   /**
   * The file name of the external buffer file used to store binary data. If this file is not specified, Aspose.3D will generate a name for you. This is ignored when export glTF in binary mode.
   * @return bufferFile
  **/
  @ApiModelProperty(value = "The file name of the external buffer file used to store binary data. If this file is not specified, Aspose.3D will generate a name for you. This is ignored when export glTF in binary mode.")
  public Boolean isBufferFile() {
    return bufferFile;
  }

  public void setBufferFile(Boolean bufferFile) {
    this.bufferFile = bufferFile;
  }

  public GLTFSaveOption saveExtras(Boolean saveExtras) {
    this.saveExtras = saveExtras;
    return this;
  }

   /**
   * Save scene object&#39;s dynamic properties into &#39;extra&#39; fields in the generated glTF file. This is useful to provide application-specific data. Default value is false..
   * @return saveExtras
  **/
  @ApiModelProperty(value = "Save scene object's dynamic properties into 'extra' fields in the generated glTF file. This is useful to provide application-specific data. Default value is false..")
  public Boolean isSaveExtras() {
    return saveExtras;
  }

  public void setSaveExtras(Boolean saveExtras) {
    this.saveExtras = saveExtras;
  }

  public GLTFSaveOption dracoCompression(Boolean dracoCompression) {
    this.dracoCompression = dracoCompression;
    return this;
  }

   /**
   * Gets or sets whether to enable draco compression.
   * @return dracoCompression
  **/
  @ApiModelProperty(value = "Gets or sets whether to enable draco compression.")
  public Boolean isDracoCompression() {
    return dracoCompression;
  }

  public void setDracoCompression(Boolean dracoCompression) {
    this.dracoCompression = dracoCompression;
  }

  public GLTFSaveOption fileContentType(FileContentType fileContentType) {
    this.fileContentType = fileContentType;
    return this;
  }

   /**
   * Gets or sets  of the FileContent type.
   * @return fileContentType
  **/
  @ApiModelProperty(value = "Gets or sets  of the FileContent type.")
  public FileContentType getFileContentType() {
    return fileContentType;
  }

  public void setFileContentType(FileContentType fileContentType) {
    this.fileContentType = fileContentType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GLTFSaveOption glTFSaveOption = (GLTFSaveOption) o;
    return Objects.equals(this.prettyPrint, glTFSaveOption.prettyPrint) &&
        Objects.equals(this.embedAssets, glTFSaveOption.embedAssets) &&
        Objects.equals(this.useCommonMaterials, glTFSaveOption.useCommonMaterials) &&
        Objects.equals(this.flipTexCoordV, glTFSaveOption.flipTexCoordV) &&
        Objects.equals(this.bufferFile, glTFSaveOption.bufferFile) &&
        Objects.equals(this.saveExtras, glTFSaveOption.saveExtras) &&
        Objects.equals(this.dracoCompression, glTFSaveOption.dracoCompression) &&
        Objects.equals(this.fileContentType, glTFSaveOption.fileContentType) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(prettyPrint, embedAssets, useCommonMaterials, flipTexCoordV, bufferFile, saveExtras, dracoCompression, fileContentType, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GLTFSaveOption {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    prettyPrint: ").append(toIndentedString(prettyPrint)).append("\n");
    sb.append("    embedAssets: ").append(toIndentedString(embedAssets)).append("\n");
    sb.append("    useCommonMaterials: ").append(toIndentedString(useCommonMaterials)).append("\n");
    sb.append("    flipTexCoordV: ").append(toIndentedString(flipTexCoordV)).append("\n");
    sb.append("    bufferFile: ").append(toIndentedString(bufferFile)).append("\n");
    sb.append("    saveExtras: ").append(toIndentedString(saveExtras)).append("\n");
    sb.append("    dracoCompression: ").append(toIndentedString(dracoCompression)).append("\n");
    sb.append("    fileContentType: ").append(toIndentedString(fileContentType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

