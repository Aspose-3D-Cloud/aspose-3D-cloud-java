/*
 * Aspose.ThreeD Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.aspose.cloud.threed.model;

import java.util.Objects;
import com.aspose.cloud.threed.model.SaveFormat;
import com.aspose.cloud.threed.model.SaveOptions;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.List;

/**
 * U3DSaveOption
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-09T10:19:53.827+08:00")
public class U3DSaveOption extends SaveOptions {
  @SerializedName("FlipCoordinateSystem")
  private Boolean flipCoordinateSystem = null;

  @SerializedName("MeshCompression")
  private Boolean meshCompression = null;

  @SerializedName("ExportNormals")
  private Boolean exportNormals = null;

  @SerializedName("ExportTextureCoordinates")
  private Boolean exportTextureCoordinates = null;

  @SerializedName("ExportVertexDiffuse")
  private Boolean exportVertexDiffuse = null;

  @SerializedName("ExportVertexSpecular")
  private Boolean exportVertexSpecular = null;

  public U3DSaveOption flipCoordinateSystem(Boolean flipCoordinateSystem) {
    this.flipCoordinateSystem = flipCoordinateSystem;
    return this;
  }

   /**
   * Gets or sets whether flip coordinate system of control points/normal during importing/exporting.
   * @return flipCoordinateSystem
  **/
  @ApiModelProperty(value = "Gets or sets whether flip coordinate system of control points/normal during importing/exporting.")
  public Boolean FlipCoordinateSystem() {
    return flipCoordinateSystem;
  }

  public void setFlipCoordinateSystem(Boolean flipCoordinateSystem) {
    this.flipCoordinateSystem = flipCoordinateSystem;
  }

  public U3DSaveOption meshCompression(Boolean meshCompression) {
    this.meshCompression = meshCompression;
    return this;
  }

   /**
   * Gets or sets whether to enable mesh data compression.
   * @return meshCompression
  **/
  @ApiModelProperty(value = "Gets or sets whether to enable mesh data compression.")
  public Boolean MeshCompression() {
    return meshCompression;
  }

  public void setMeshCompression(Boolean meshCompression) {
    this.meshCompression = meshCompression;
  }

  public U3DSaveOption exportNormals(Boolean exportNormals) {
    this.exportNormals = exportNormals;
    return this;
  }

   /**
   * Gets or sets whether to export normal data.
   * @return exportNormals
  **/
  @ApiModelProperty(value = "Gets or sets whether to export normal data.")
  public Boolean ExportNormals() {
    return exportNormals;
  }

  public void setExportNormals(Boolean exportNormals) {
    this.exportNormals = exportNormals;
  }

  public U3DSaveOption exportTextureCoordinates(Boolean exportTextureCoordinates) {
    this.exportTextureCoordinates = exportTextureCoordinates;
    return this;
  }

   /**
   * Gets or sets whether to export texture coordinates.
   * @return exportTextureCoordinates
  **/
  @ApiModelProperty(value = "Gets or sets whether to export texture coordinates.")
  public Boolean ExportTextureCoordinates() {
    return exportTextureCoordinates;
  }

  public void setExportTextureCoordinates(Boolean exportTextureCoordinates) {
    this.exportTextureCoordinates = exportTextureCoordinates;
  }

  public U3DSaveOption exportVertexDiffuse(Boolean exportVertexDiffuse) {
    this.exportVertexDiffuse = exportVertexDiffuse;
    return this;
  }

   /**
   * Gets or sets whether to export vertex&#39;s diffuse color.
   * @return exportVertexDiffuse
  **/
  @ApiModelProperty(value = "Gets or sets whether to export vertex's diffuse color.")
  public Boolean ExportVertexDiffuse() {
    return exportVertexDiffuse;
  }

  public void setExportVertexDiffuse(Boolean exportVertexDiffuse) {
    this.exportVertexDiffuse = exportVertexDiffuse;
  }

  public U3DSaveOption exportVertexSpecular(Boolean exportVertexSpecular) {
    this.exportVertexSpecular = exportVertexSpecular;
    return this;
  }

   /**
   * Gets or sets whether to export vertex&#39; specular color.
   * @return exportVertexSpecular
  **/
  @ApiModelProperty(value = "Gets or sets whether to export vertex' specular color.")
  public Boolean ExportVertexSpecular() {
    return exportVertexSpecular;
  }

  public void setExportVertexSpecular(Boolean exportVertexSpecular) {
    this.exportVertexSpecular = exportVertexSpecular;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    U3DSaveOption u3DSaveOption = (U3DSaveOption) o;
    return Objects.equals(this.flipCoordinateSystem, u3DSaveOption.flipCoordinateSystem) &&
        Objects.equals(this.meshCompression, u3DSaveOption.meshCompression) &&
        Objects.equals(this.exportNormals, u3DSaveOption.exportNormals) &&
        Objects.equals(this.exportTextureCoordinates, u3DSaveOption.exportTextureCoordinates) &&
        Objects.equals(this.exportVertexDiffuse, u3DSaveOption.exportVertexDiffuse) &&
        Objects.equals(this.exportVertexSpecular, u3DSaveOption.exportVertexSpecular) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(flipCoordinateSystem, meshCompression, exportNormals, exportTextureCoordinates, exportVertexDiffuse, exportVertexSpecular, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class U3DSaveOption {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    flipCoordinateSystem: ").append(toIndentedString(flipCoordinateSystem)).append("\n");
    sb.append("    meshCompression: ").append(toIndentedString(meshCompression)).append("\n");
    sb.append("    exportNormals: ").append(toIndentedString(exportNormals)).append("\n");
    sb.append("    exportTextureCoordinates: ").append(toIndentedString(exportTextureCoordinates)).append("\n");
    sb.append("    exportVertexDiffuse: ").append(toIndentedString(exportVertexDiffuse)).append("\n");
    sb.append("    exportVertexSpecular: ").append(toIndentedString(exportVertexSpecular)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

