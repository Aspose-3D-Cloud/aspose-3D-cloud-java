/*
 * Aspose.ThreeD Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.aspose.cloud.threed.model;

import java.util.Objects;
import com.aspose.cloud.threed.model.SaveFormat;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * SaveOptions
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-05-09T10:19:53.827+08:00")

public class SaveOptions {
  @SerializedName("SaveFormat")
  private SaveFormat saveFormat = null;

  @SerializedName("LookupPaths")
  private List<String> lookupPaths = null;

  @SerializedName("FileName")
  private String fileName = null;

  @SerializedName("FileFormat")
  private String fileFormat = null;

  public SaveOptions saveFormat(SaveFormat saveFormat) {
    this.saveFormat = saveFormat;
    return this;
  }

   /**
   * Gets or sets  of the SaveFormat.
   * @return saveFormat
  **/
  @ApiModelProperty(value = "Gets or sets  of the SaveFormat.")
  public SaveFormat getSaveFormat() {
    return saveFormat;
  }

  public void setSaveFormat(SaveFormat saveFormat) {
    this.saveFormat = saveFormat;
  }

  public SaveOptions lookupPaths(List<String> lookupPaths) {
    this.lookupPaths = lookupPaths;
    return this;
  }

  public SaveOptions addLookupPathsItem(String lookupPathsItem) {
    if (this.lookupPaths == null) {
      this.lookupPaths = new ArrayList<>();
    }
    this.lookupPaths.add(lookupPathsItem);
    return this;
  }

   /**
   * Some files like OBJ depends on external file, the lookup paths will allows Aspose.3D to look for external file to load
   * @return lookupPaths
  **/
  @ApiModelProperty(value = "Some files like OBJ depends on external file, the lookup paths will allows Aspose.3D to look for external file to load")
  public List<String> getLookupPaths() {
    return lookupPaths;
  }

  public void setLookupPaths(List<String> lookupPaths) {
    this.lookupPaths = lookupPaths;
  }

  public SaveOptions fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

   /**
   * The file name of the exporting/importing scene. This is optional, but useful when serialize external assets like OBJ&#39;s material.
   * @return fileName
  **/
  @ApiModelProperty(value = "The file name of the exporting/importing scene. This is optional, but useful when serialize external assets like OBJ's material.")
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }

  public SaveOptions fileFormat(String fileFormat) {
    this.fileFormat = fileFormat;
    return this;
  }

   /**
   * The file format��like FBX,U3D,PDF ....
   * @return fileFormat
  **/
  @ApiModelProperty(value = "The file format��like FBX,U3D,PDF ....")
  public String getFileFormat() {
    return fileFormat;
  }

  public void setFileFormat(String fileFormat) {
    this.fileFormat = fileFormat;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SaveOptions saveOptions = (SaveOptions) o;
    return Objects.equals(this.saveFormat, saveOptions.saveFormat) &&
        Objects.equals(this.lookupPaths, saveOptions.lookupPaths) &&
        Objects.equals(this.fileName, saveOptions.fileName) &&
        Objects.equals(this.fileFormat, saveOptions.fileFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(saveFormat, lookupPaths, fileName, fileFormat);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SaveOptions {\n");
    
    sb.append("    saveFormat: ").append(toIndentedString(saveFormat)).append("\n");
    sb.append("    lookupPaths: ").append(toIndentedString(lookupPaths)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    fileFormat: ").append(toIndentedString(fileFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

