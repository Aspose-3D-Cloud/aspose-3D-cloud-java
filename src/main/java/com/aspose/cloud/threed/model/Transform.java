/*
 * Aspose.ThreeD Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.aspose.cloud.threed.model;

import java.util.Objects;
import com.aspose.cloud.threed.model.Vector3;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * A transform contains information that allow access to object&#39;s translate/scale/rotation or transform matrix at minimum cost This is used by local transform.             
 */
@ApiModel(description = "A transform contains information that allow access to object's translate/scale/rotation or transform matrix at minimum cost This is used by local transform.             ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-08-14T15:01:31.292+08:00")
public class Transform {
  @SerializedName("Translation")
  private Vector3 translation = null;

  @SerializedName("Scale")
  private Vector3 scale = null;

  @SerializedName("PreRotation")
  private Vector3 preRotation = null;

  @SerializedName("PostRotation")
  private Vector3 postRotation = null;

  @SerializedName("EulerAngles")
  private Vector3 eulerAngles = null;

  public Transform translation(Vector3 translation) {
    this.translation = translation;
    return this;
  }

   /**
   * Gets or sets the translation
   * @return translation
  **/
  @ApiModelProperty(value = "Gets or sets the translation")
  public Vector3 getTranslation() {
    return translation;
  }

  public void setTranslation(Vector3 translation) {
    this.translation = translation;
  }

  public Transform scale(Vector3 scale) {
    this.scale = scale;
    return this;
  }

   /**
   * Gets or sets the scale
   * @return scale
  **/
  @ApiModelProperty(value = "Gets or sets the scale")
  public Vector3 getScale() {
    return scale;
  }

  public void setScale(Vector3 scale) {
    this.scale = scale;
  }

  public Transform preRotation(Vector3 preRotation) {
    this.preRotation = preRotation;
    return this;
  }

   /**
   * Gets or sets the pre-rotation represented in degree
   * @return preRotation
  **/
  @ApiModelProperty(value = "Gets or sets the pre-rotation represented in degree")
  public Vector3 getPreRotation() {
    return preRotation;
  }

  public void setPreRotation(Vector3 preRotation) {
    this.preRotation = preRotation;
  }

  public Transform postRotation(Vector3 postRotation) {
    this.postRotation = postRotation;
    return this;
  }

   /**
   * Gets or sets the post-rotation represented in degree
   * @return postRotation
  **/
  @ApiModelProperty(value = "Gets or sets the post-rotation represented in degree")
  public Vector3 getPostRotation() {
    return postRotation;
  }

  public void setPostRotation(Vector3 postRotation) {
    this.postRotation = postRotation;
  }

  public Transform eulerAngles(Vector3 eulerAngles) {
    this.eulerAngles = eulerAngles;
    return this;
  }

   /**
   * Gets or sets the rotation represented in euler angles, measured in degree             
   * @return eulerAngles
  **/
  @ApiModelProperty(value = "Gets or sets the rotation represented in euler angles, measured in degree             ")
  public Vector3 getEulerAngles() {
    return eulerAngles;
  }

  public void setEulerAngles(Vector3 eulerAngles) {
    this.eulerAngles = eulerAngles;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transform transform = (Transform) o;
    return Objects.equals(this.translation, transform.translation) &&
        Objects.equals(this.scale, transform.scale) &&
        Objects.equals(this.preRotation, transform.preRotation) &&
        Objects.equals(this.postRotation, transform.postRotation) &&
        Objects.equals(this.eulerAngles, transform.eulerAngles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(translation, scale, preRotation, postRotation, eulerAngles);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transform {\n");
    
    sb.append("    translation: ").append(toIndentedString(translation)).append("\n");
    sb.append("    scale: ").append(toIndentedString(scale)).append("\n");
    sb.append("    preRotation: ").append(toIndentedString(preRotation)).append("\n");
    sb.append("    postRotation: ").append(toIndentedString(postRotation)).append("\n");
    sb.append("    eulerAngles: ").append(toIndentedString(eulerAngles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

